class Solution {
public:
    vector<int> boundaryTraversal(vector<vector<int>>& matrix, int n, int m) {
        vector<int> result;
        
        if (n == 1) { // If there's only one row
            for (int j = 0; j < m; ++j) {
                result.push_back(matrix[0][j]);
            }
        } else if (m == 1) { // If there's only one column
            for (int i = 0; i < n; ++i) {
                result.push_back(matrix[i][0]);
            }
        } else {
            // Traverse the first row
            for (int j = 0; j < m; ++j) {
                result.push_back(matrix[0][j]);
            }
            
            // Traverse the last column
            for (int i = 1; i < n; ++i) {
                result.push_back(matrix[i][m - 1]);
            }
            
            // Traverse the last row if there are more than one row
            if (n > 1) {
                for (int j = m - 2; j >= 0; --j) {
                    result.push_back(matrix[n - 1][j]);
                }
            }
            
            // Traverse the first column if there are more than one column
            if (m > 1) {
                for (int i = n - 2; i >= 1; --i) {
                    result.push_back(matrix[i][0]);
                }
            }
        }
        
        return result;
    }
};

